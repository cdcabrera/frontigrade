// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AccountGraphCard Component should render a connected component with default props: connected 1`] = `
<AccountGraphCard
  error={false}
  filter={
    Object {
      "query": Object {},
    }
  }
  filterId={1}
  fulfilled={false}
  getAccountInstances={[Function]}
  graphData={
    Object {
      "dailyUsage": Array [],
      "instancesOpenshift": 0,
      "instancesRhel": 0,
    }
  }
  pending={false}
  rhelOptions={
    Array [
      Object {
        "title": "Core Hours",
        "value": "rhelVcpuTime",
      },
      Object {
        "title": "GB Memory Hours",
        "value": "rhelMemoryTime",
      },
      Object {
        "active": true,
        "title": "Instance Hours",
        "value": "rhelRuntimeTime",
      },
    ]
  }
  rhocpOptions={
    Array [
      Object {
        "active": true,
        "title": "Core Hours",
        "value": "openshiftVcpuTime",
      },
      Object {
        "title": "GB Memory Hours",
        "value": "openshiftMemoryTime",
      },
      Object {
        "title": "Instance Hours",
        "value": "openshiftRuntimeTime",
      },
    ]
  }
  updateInstances={false}
  view="test"
  viewGlobal={null}
/>
`;

exports[`AccountGraphCard Component should render a non-connected component: non-connected 1`] = `
<div
  class="container-cards-pf container-fluid"
>
  <div
    class=""
  >
    <div
      class="row-cards-pf row"
    >
      <div
        class="col-sm-6"
      />
      <div
        class="col-sm-6"
      />
    </div>
  </div>
</div>
`;

exports[`AccountGraphCard Component should render multiple states: error 1`] = `""`;

exports[`AccountGraphCard Component should render multiple states: fulfilled 1`] = `
<CardGrid
  className=""
  fluid={true}
  matchHeight={true}
>
  <Row
    bsClass="row"
    className="row-cards-pf"
    componentClass="div"
  >
    <Col
      bsClass="col"
      componentClass="div"
      sm={6}
    >
      <Card
        accented={true}
        aggregated={false}
        aggregatedMini={false}
        cardRef={null}
        className="cloudmeter-utilization-graph fadein"
        matchHeight={true}
      >
        <CardHeading
          className=""
        >
          <DropdownSelect
            className="card-pf-time-frame-filter"
            id="graphRhel"
            multiselect={false}
            onSelect={[Function]}
            options={
              Array [
                Object {
                  "title": "Core Hours",
                  "value": "rhelVcpuTime",
                },
                Object {
                  "title": "GB Memory Hours",
                  "value": "rhelMemoryTime",
                },
                Object {
                  "active": true,
                  "title": "Instance Hours",
                  "value": "rhelRuntimeTime",
                },
              ]
            }
            pullRight={true}
            selectValue={null}
            title="Select option"
          />
          <CardTitle
            className=""
          >
            Red Hat Enterprise Linux
          </CardTitle>
        </CardHeading>
        <CardBody
          className=""
        >
          <div
            className="cloudmeter-card-info"
          >
            <strong>
              <Component />
            </strong>
            <Label
              bsStyle="warning"
              type="default"
            >
              <abbr
                title="Red Hat Enterprise Linux"
              >
                RHEL
              </abbr>
            </Label>
          </div>
        </CardBody>
      </Card>
    </Col>
    <Col
      bsClass="col"
      componentClass="div"
      sm={6}
    >
      <Card
        accented={true}
        aggregated={false}
        aggregatedMini={false}
        cardRef={null}
        className="cloudmeter-utilization-graph fadein"
        matchHeight={true}
      >
        <CardHeading
          className=""
        >
          <DropdownSelect
            className="card-pf-time-frame-filter"
            id="graphOpenshift"
            multiselect={false}
            onSelect={[Function]}
            options={
              Array [
                Object {
                  "active": true,
                  "title": "Core Hours",
                  "value": "openshiftVcpuTime",
                },
                Object {
                  "title": "GB Memory Hours",
                  "value": "openshiftMemoryTime",
                },
                Object {
                  "title": "Instance Hours",
                  "value": "openshiftRuntimeTime",
                },
              ]
            }
            pullRight={true}
            selectValue={null}
            title="Select option"
          />
          <CardTitle
            className=""
          >
            Red Hat OpenShift Container Platform
          </CardTitle>
        </CardHeading>
        <CardBody
          className=""
        >
          <div
            className="cloudmeter-card-info"
          >
            <strong>
              <Component />
            </strong>
            <Label
              bsStyle="primary"
              type="default"
            >
              <abbr
                title="Red Hat OpenShift Container Platform"
              >
                RHOCP
              </abbr>
            </Label>
          </div>
        </CardBody>
      </Card>
    </Col>
  </Row>
</CardGrid>
`;

exports[`AccountGraphCard Component should render multiple states: pending 1`] = `
<CardGrid
  className=""
  fluid={true}
  matchHeight={true}
>
  <Row
    bsClass="row"
    className="row-cards-pf"
    componentClass="div"
  >
    <Col
      bsClass="col"
      componentClass="div"
      sm={6}
    >
      <Card
        accented={true}
        aggregated={false}
        aggregatedMini={false}
        cardRef={null}
        className="cloudmeter-utilization-graph cloudmeter-utilization-graph-loading fadein"
        matchHeight={true}
      >
        <CardBody
          className=""
        >
          <Spinner
            className="blank-slate-pf-icon"
            inline={false}
            inverse={false}
            loading={true}
            size="sm"
          />
          <div
            className="text-center"
          >
            <small>
              Loading...
            </small>
          </div>
        </CardBody>
      </Card>
    </Col>
    <Col
      bsClass="col"
      componentClass="div"
      sm={6}
    >
      <Card
        accented={true}
        aggregated={false}
        aggregatedMini={false}
        cardRef={null}
        className="cloudmeter-utilization-graph cloudmeter-utilization-graph-loading fadein"
        matchHeight={true}
      >
        <CardBody
          className=""
        >
          <Spinner
            className="blank-slate-pf-icon"
            inline={false}
            inverse={false}
            loading={true}
            size="sm"
          />
          <div
            className="text-center"
          >
            <small>
              Loading...
            </small>
          </div>
        </CardBody>
      </Card>
    </Col>
  </Row>
</CardGrid>
`;
