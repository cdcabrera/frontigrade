// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AccountView Component should render a connected component with default props: connected 1`] = `
<Route>
  <Component />
</Route>
`;

exports[`AccountView Component should render a non-connected component in pending state: pending 1`] = `
<div
  class="cloudmeter-view-container"
/>
`;

exports[`AccountView Component should render a non-connected component in pending state: pending with list 1`] = `
<div
  className="cloudmeter-view-container fadein"
>
  <Grid
    bsClass="container"
    componentClass="div"
    fluid={true}
  >
    <Breadcrumb
      className="cloudmeter-breadcrumb"
      title={true}
    >
      <BreadcrumbItem
        active={true}
        aria-current="page"
      >
        <strong>
          Accounts
        </strong>
      </BreadcrumbItem>
    </Breadcrumb>
  </Grid>
  <ViewToolbar
    activeFilters={Array []}
    dateFields={null}
    dateValue={null}
    filterField={null}
    filterFields={
      Array [
        Object {
          "filterType": "text",
          "id": "name_pattern",
          "placeholder": "Filter by Name",
          "title": "Name",
        },
      ]
    }
    filterValue=""
    onAddAccount={[Function]}
    onExport={null}
    query={Object {}}
    resultsType="Result"
    resultsTypePlural="Results"
    selectedCount={0}
    sortAscending={true}
    sortFields={
      Array [
        Object {
          "id": "name",
          "isNumeric": false,
          "sortAscending": true,
          "title": "Name",
        },
        Object {
          "id": "images",
          "isNumeric": false,
          "sortAscending": true,
          "title": "Images",
        },
        Object {
          "id": "instances",
          "isNumeric": false,
          "sortAscending": true,
          "title": "Instances",
        },
        Object {
          "id": "rhel",
          "isNumeric": false,
          "sortAscending": true,
          "title": "Rhel",
        },
        Object {
          "id": "openshift",
          "isNumeric": false,
          "sortAscending": true,
          "title": "OpenShift",
        },
      ]
    }
    sortValue={null}
    totalCount={0}
    view="account"
    viewGlobal="accountGlobal"
  />
  <div
    className="cloudmeter-list-container"
  >
    <Connect(AccountGraphCard)
      filter={
        Object {
          "dateFields": null,
          "query": Object {},
        }
      }
      view="account"
    />
    <Grid
      bsClass="container"
      componentClass="div"
      fluid={true}
    >
      <Row
        bsClass="row"
        className="row-cards-pf"
        componentClass="div"
      >
        <Col
          bsClass="col"
          componentClass="div"
          xs={12}
        >
          <Card
            accented={false}
            aggregated={false}
            aggregatedMini={false}
            cardRef={null}
            className="cloudmeter-list-view-card"
            matchHeight={false}
          >
            <ListView
              className="cloudmeter-list-view"
            >
              <AccountViewListItem
                item={
                  Object {
                    "arn": "arn:aws:iam::TEST",
                    "creation_date": "2018-07-06T15:09:21.442412Z",
                    "id": "1",
                    "images": 1,
                    "instances": 2,
                    "name": "Lorem test",
                    "openshift_instances": null,
                    "rhel_instances": 1,
                    "type": "aws",
                    "user_id": 1,
                  }
                }
                key="1"
                onDelete={[Function]}
                onDetail={[Function]}
                onEdit={[Function]}
                t={[Function]}
              />
            </ListView>
          </Card>
        </Col>
      </Row>
    </Grid>
  </div>
  <Modal
    animation={false}
    autoFocus={true}
    backdrop={false}
    bsClass="modal"
    bsSize="lg"
    dialogComponentClass={[Function]}
    enforceFocus={true}
    keyboard={true}
    manager={
      ModalManager {
        "add": [Function],
        "containers": Array [],
        "data": Array [],
        "handleContainerOverflow": true,
        "hideSiblingNodes": true,
        "isTopModal": [Function],
        "modals": Array [],
        "remove": [Function],
      }
    }
    onHide={[Function]}
    renderBackdrop={[Function]}
    restoreFocus={true}
    show={true}
  >
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <Spinner
        className="blank-slate-pf-icon"
        inline={false}
        inverse={false}
        loading={true}
        size="lg"
      />
      <div
        className="text-center"
      >
        Loading...
      </div>
    </ModalBody>
  </Modal>
</div>
`;

exports[`AccountView Component should render a non-connected component with empty state: empty state 1`] = `
<div
  class="container-fluid"
>
  <div
    class="row"
  >
    <div
      class="blank-slate-pf full-page-blank-slate fadein"
    >
      <div
        class="blank-slate-pf-icon"
      >
        <span
          aria-hidden="true"
          class="pficon pficon-add-circle-o"
        />
      </div>
      <h4
        class="h1 blank-slate-pf-title"
      >
        Welcome to Cloud Meter
      </h4>
      <p
        class="blank-slate-pf-info"
      >
        Cloud Meter collects usage analytics data for Red Hat cloud infrastructure products in your environments.
      </p>
      <p
        class="blank-slate-pf-info"
      >
        Add an AWS account to get started.
      </p>
      <p
        class="blank-slate-pf-info"
      >
        Adding an account includes creating a specialized IAM profile and role.
      </p>
      <p
        class="blank-slate-pf-info"
      >
        For more information about the IAM steps in this process, see the 
        <a
          href="https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html"
          rel="noopener noreferrer"
          target="_blank"
        >
          IAM User Guide
        </a>
        .
      </p>
      <div
        class="blank-slate-pf-main-action"
      >
        <button
          class="btn btn-lg btn-primary"
          type="button"
        >
          Add Account
        </button>
      </div>
    </div>
  </div>
</div>
`;
